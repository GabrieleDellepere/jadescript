module tests.collections

ontology Collections
    concept C1(x as list of text) 
    concept C2(x as list of C1)
    concept C3(x as map of integer:boolean)
    concept CR(x as list of CR)
    concept CS(x as set of C1)
    concept CSS(x as set of CS)
    proposition P
    predicate P1(x as set of text)
    predicate P2(x as list of integer)
    predicate P3(x as map of text:integer)
    predicate P4(x as list of C1)
    predicate P5(x as P1)
    
    action A2(x as list of C2)
    
agent CollectionReceiver uses ontology Collections
    on create do
        activate ReceiveCollection
        
    cyclic behaviour ReceiveCollection
        on message inform do
            log __dt__ content
            
        on message request do
            log __dt__ content
            
    
        

agent CollectionSender uses ontology Collections
    property p as text
    
    on create with args as list of text do
        receiver = "CollectionReceiver"@
        send message inform P1({"a"}) to receiver
        send message inform P2([1]) to receiver
        send message inform P3({"b":2}) to receiver
        log {P1({} of text), P}
        
        log __dt__ [] of integer
        log __dt__ [1,2,3|[1,2,3]]
        log __dt__ [|[|[] of integer]]
        
        
        
    cyclic behaviour MemberBehaviour
        on message inform P4([C1(["a, b"]), C1(["c, a"])]) do
            do nothing
