module examples.auction.gui

import examples.auction.gui.ItemNotForSale


ontology AuctioneerGUI extends AuctionsGUI
    native concept AuctioneerView
    proposition CloseAuctioneer


native procedure updateAuctioneerGUI with view as AuctioneerView,
    state as AuctionState, participants as set of aid
    uses ontologies EnglishAuction, AuctioneerGUI


# Auctioneer agent.
agent Auctioneer uses ontologies EnglishAuction, AuctioneerGUI, FacilitatorOntology

    # --Auctioneer parameters. Change these accordingly--
    # No auction can be done with less participants:
    property minimumParticipants = 2  
    # The auctioneer awaits this interval for new bids:
    property waitingForBidsTime as duration
    # Initial price:
    property startBid as integer
    # If the auction never reaches this price, the item is not sold:
    property reserve as integer
    # Each bid has to outbid the current price by this amount:
    property bidMinimumIncrement as integer
    # The item to be sold:
    property item as Item
    
    property view as AuctioneerView
    
    # --Auctioneer state variables--
    property currentBid as integer
    property candidateBuyer as aid
    property thereIsCandidate = false
    property participants as set of aid 
    
    # --Auction behaviour--
    property doAuction as DoAuction = DoAuction
    property endAuction as EndAuction = EndAuction
    property terminated = false
    
    on create with view as AuctioneerView, 
            item as Item, startBid as integer, 
            reserve as integer, bidMinimumIncrement as integer, 
            timeout as duration do
        item of this = item
        startBid of this = startBid
        currentBid of this = startBid
        reserve of this = reserve
        bidMinimumIncrement of this = bidMinimumIncrement
        waitingForBidsTime of this = timeout
        view of this = view
        log "Auctioneer " + name of agent + " selling item " + item + "."
        log "Registering... "
        activate RegisterAsAuctioneer
        
    on destroy do
        log "Auctioneer shutting down, informing Facilitator and aborting auction."
        if not terminated do
            do terminateAuction
        send message request Deregister to "Facilitator"@
        
    # Procedure used to terminate the auction
    procedure terminateAuction do
        # Create state and update view
        st = EndedAuctionState(item, currentBid, true, candidateBuyer)
        do updateAuctioneerGUI with view, st, participants
        if not thereIsCandidate or currentBid < reserve do
            log "No valid bid submitted. Not selling item."
            sold of st = false
            send message inform ItemNotSold(item, candidateBuyer, currentBid) to participants
        else if not (participants contains candidateBuyer) do
            log "The highest bidder left the auction. Not selling item."
            sold of st = false
            send message inform ItemNotSold(item, candidateBuyer, currentBid) to participants
        else do
            log "Selling item "+item+" to "+candidateBuyer
            send message inform ItemSold(item, candidateBuyer, currentBid) to participants
        terminated = true


cyclic behaviour RegisterAsAuctioneer for agent Auctioneer
    on activate do
        send message request Register(AuctioneerRole) to "Facilitator"@
        
    on message inform Registered do
        log "Registered!"
        activate AwaitParticipants
        deactivate this


cyclic behaviour AwaitParticipants for agent Auctioneer
    procedure logStatus do
        log "Awaiting participants (" + size of participants + "/" + minimumParticipants + ")..."
 
    on activate do
        st = AwaitingAuctionState(item, currentBid,
            bidMinimumIncrement, size of participants, minimumParticipants)
        do updateAuctioneerGUI with view, st, participants
        do logStatus

    on message inform Participating do
        log localName of sender + " is now Participating."
        add sender of message to participants
        do logStatus
        st = AwaitingAuctionState(item, currentBid, bidMinimumIncrement,
            size of participants, minimumParticipants)
        if size of participants ≥ minimumParticipants do
            log "Starting auction."
            log "Selling: " + item
            do updateAuctioneerGUI with view, st, participants 
            activate doAuction
            deactivate this
        else do
            log "Informing new participant "+localName of sender+" of awaiting state ("
                + size of participants+"/"+minimumParticipants+")"
            do updateAuctioneerGUI with view, st, participants
            send message inform AwaitingStart(item, currentBid, 
                bidMinimumIncrement, size of participants, minimumParticipants) to sender
            
    on message inform Leaving do
        log localName of sender + " is leaving the Auction."
        remove sender of message from participants
        do updateAuctioneerGUI with view, AwaitingAuctionState(
            item, currentBid, bidMinimumIncrement,
            size of participants, minimumParticipants), participants
        do logStatus
        
    on message request ProvideAuctionState do
        log "Informing "+localName of sender+" of awaiting state ("
                + size of participants+"/"+minimumParticipants+")"
        send message inform AwaitingStart(
            item, currentBid, bidMinimumIncrement,
            size of participants, minimumParticipants) to sender


cyclic behaviour DoAuction for agent Auctioneer 

    property nextTimeout as timestamp

    on activate do
        log "Selling " + item + ", starting from bid " + currentBid + 
            "(minimum bid increment: " + bidMinimumIncrement + ", reserve: " + reserve + ")"
        do callForBids

    procedure callForBids do
        nextTimeout = now + waitingForBidsTime
        log "Calling for proposals, new price: " + currentBid + ", next timeout: " + nextTimeout
        do updateAuctioneerGUI with view, RunningAuctionState(
            item, currentBid, bidMinimumIncrement,
            nextTimeout, getCurrentWinnerName()), participants
        send message cfp SubmitBid(item, currentBid, bidMinimumIncrement,
            nextTimeout, getCurrentWinnerName()) to participants
        activate endAuction at nextTimeout

    function getCurrentWinnerName() as text do
        currentlyWinning = ""
        if thereIsCandidate do
            currentlyWinning = name of candidateBuyer
        return currentlyWinning
        
    on message inform Participating do
        add sender of message to participants
        st = RunningAuctionState(item, currentBid, bidMinimumIncrement, 
            nextTimeout, getCurrentWinnerName())
        send message cfp SubmitBid(item, currentBid, bidMinimumIncrement, 
            nextTimeout, getCurrentWinnerName()) to sender of message
        do updateAuctioneerGUI with view, st, participants
    
    on message inform Leaving do
        log sender + " is leaving the Auction."
        remove sender of message from participants
        if size of participants < minimumParticipants do
            activate endAuction
        else do
            st = RunningAuctionState(item, currentBid, bidMinimumIncrement, 
                nextTimeout, getCurrentWinnerName())
            do updateAuctioneerGUI with view, st, participants

    on message propose (Buy(proposedItem), 
        Priced(proposedItem, proposedPrice)) do
        log "Received bid of "+proposedPrice
        minExpectedPrice = currentBid+bidMinimumIncrement
        if proposedItem ≠ item do
            log "Rejecting proposal, item not for sale: " + proposedItem
            send message reject_proposal (
            	Buy(proposedItem), 
            	Priced(proposedItem, proposedPrice), 
            	BidRejected(ItemNotForSale)
            ) to sender of message
        else if proposedPrice < minExpectedPrice do
            log "Rejecting proposal, bid too low (" + proposedPrice + " < " + minExpectedPrice + ")"
            send message reject_proposal (
                Buy(proposedItem),
            	Priced(proposedItem, proposedPrice),
            	BidRejected(BidTooLow(minExpectedPrice))
            ) to sender of message
        else do
            log "Accepting proposal!"
            send message accept_proposal (
            	Buy(proposedItem),
            	Priced(proposedItem, proposedPrice)
            ) to sender of message
            currentBid = proposedPrice
            thereIsCandidate = true
            candidateBuyer = sender of message
            do callForBids
            
    on message request ProvideAuctionStatus do
      send message cfp SubmitBid(item, currentBid,
          bidMinimumIncrement, nextTimeout, getCurrentWinnerName()
      ) to sender


one shot behaviour EndAuction for agent Auctioneer
    on execute do
        deactivate doAuction
        do terminateAuction
        do delete

    