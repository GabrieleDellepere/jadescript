module examples.auction.gui

import examples.auction.gui.ItemNotForSale

# Auctioneer agent.
agent Auctioneer uses ontologies EnglishAuction, FacilitatorOntology

    # --Auctioneer parameters. Change these accordingly--
    # No auction can be done with less participants:
    property minimumParticipants = 2  
    # The auctioneer awaits this interval for new bids:
    property waitingForBidsTime = "PT30S" as duration 
    # Initial price:
    property startBid as integer
    # If the auction never reaches this price, the item is not sold:
    property reserve as integer
    # Each bid has to outbid the current price by this amount:
    property bidMinimumIncrement as integer
    # The item to be sold:
    property item as Item
    
    # --Auctioneer state variables--
    property currentBid = startBid
    property candidateBuyer as aid
    property thereIsCandidate = false
    property participants as set of aid 
    
    # --Auction behaviour--
    property doAuction as DoAuction = DoAuction
    property endAuction as EndAuction = EndAuction
    
    on create with item as Item, startBid as integer, 
        reserve as integer, bidMinimumIncrement as integer do
        item of this = item
        startBid of this = startBid
        reserve of this = reserve
        bidMinimumIncrement of this = bidMinimumIncrement
        log "Auctioneer " + name of agent + " selling item " + item + "."
        log "Registering... "
        activate RegisterAsAuctioneer
        
    on destroy do
        send message request Deregister to "Facilitator"@


cyclic behaviour RegisterAsAuctioneer for agent Auctioneer
    on activate do
        send message request Register(AuctioneerRole) to "Facilitator"@
        
    on message inform Registered do
        log "Registered!"
        activate AwaitParticipants
        deactivate this
    
    


cyclic behaviour AwaitParticipants for agent Auctioneer
    procedure logStatus do
        log "Awaiting participants (" + size of participants + "/" + minimumParticipants + ")..."
 
    on activate do
        do logStatus

    on message inform Participating do
        add sender of message to participants
        do logStatus
        if size of participants ≥ minimumParticipants do
            log "Starting auction."
            log "Selling: " + item
            activate doAuction
            deactivate this
            

    on message inform Leaving do
        remove sender of message from participants
        do logStatus
        
    on message request ProvideAuctionState do
        send message inform StateIs(AwaitingBidders(
            item,
            currentBid,
            bidMinimumIncrement,
            size of participants
        )) to sender


cyclic behaviour DoAuction for agent Auctioneer 

    property nextTimeout as timestamp

    on activate do
        log "Selling " + item + ", starting from bid " + currentBid + 
            "(minimum bid increment: " + bidMinimumIncrement + ", reserve: " + reserve + ")"
        do callForBids

    procedure callForBids do
        nextTimeout = now + waitingForBidsTime
        log "Calling for proposals, new price: " + currentBid + ", next timeout: " + nextTimeout
        send message cfp SubmitBid(RunningAuction(
                item,
            currentBid,
            bidMinimumIncrement,
            nextTimeout,
            getCurrentWinnerName()
        )) to participants
        activate endAuction at nextTimeout

    function getCurrentWinnerName() as text do
        currentlyWinning = ""
        if thereIsCandidate do
            currentlyWinning = name of candidateBuyer
        return currentlyWinning
        
    on message inform Participating do
        add sender of message to participants
        send message cfp SubmitBid(RunningAuction(
            item, 
            currentBid, 
            bidMinimumIncrement, 
            nextTimeout, 
            getCurrentWinnerName()
         )) to sender of message
    
    
    on message inform Leaving do
        remove sender of message from participants
        if size of participants < minimumParticipants do
            activate endAuction

    on message propose (
        Buy(proposedItem), 
        Priced(proposedItem, proposedPrice)
    ) do
        log "Received bid of "+proposedPrice
        minExpectedPrice = currentBid+bidMinimumIncrement
        
        if proposedItem ≠ item do
            log "Rejecting proposal, item not for sale: " + proposedItem
            send message reject_proposal (
            	Buy(proposedItem), 
            	Priced(proposedItem, proposedPrice), 
            	BidRejected(ItemNotForSale)
            ) to sender of message
        else if proposedPrice < minExpectedPrice do
            log "Rejecting proposal, bid too low (" + proposedPrice + " < " + minExpectedPrice + ")"
            send message reject_proposal (
            	Buy(proposedItem),
            	Priced(proposedItem, proposedPrice),
            	BidRejected(BidTooLow(minExpectedPrice))
            ) to sender of message
        else do
            log "Accepting proposal!"
            send message accept_proposal (
            	Buy(proposedItem),
            	Priced(proposedItem, proposedPrice)
            ) to sender of message
            currentBid = proposedPrice
            thereIsCandidate = true
            candidateBuyer = sender of message
            do callForBids
            
    on message request ProvideAuctionStatus do
      send message cfp SubmitBid(RunningAuction(
          item,
          currentBid,
          bidMinimumIncrement,
          nextTimeout,
          getCurrentWinnerName()
      )) to sender


one shot behaviour EndAuction for agent Auctioneer
    
    on execute do
        deactivate doAuction
        if not thereIsCandidate or currentBid < reserve do
            log "No valid bid submitted. Not selling item."
            send message inform ItemNotSold(item) to participants
            do delete
        else do
            log "Selling item "+item+" to "+candidateBuyer
            send message inform ItemSold(item, candidateBuyer, currentBid) to participants
            do delete
    