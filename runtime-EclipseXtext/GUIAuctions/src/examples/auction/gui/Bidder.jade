module examples.auction.gui

import examples.auction.gui.Item
import examples.auction.gui.randomInteger

# Used by the bidder to change notify the user of the auctioneer's response to a bid
native procedure notifyResponse with view as BidderView, msg as text
    uses ontology BuyerGUI

agent Bidder uses ontology BuyerGUI
    property strategy as BidderStrategy = IdleBidder
    property auctioneer as aid
    property view as BidderView
    property delayMin as integer
    property delayMax as integer
    property participate as ParticipateToAuction = ParticipateToAuction
    
    on create with auctioneer as aid, view as BidderView, 
            delayMin as integer, delayMax as integer do
        strategy of this = strategy
        auctioneer of this = auctioneer
        view of this = view
        delayMin of this = delayMin
        delayMax of this = delayMax
        log "Bidder "+name of agent+" participating to auction of "
            +localName of auctioneer+" (strategy="+strategy+")"
        activate participate
        activate DetectLeaving
        
    on destroy do
        deactivate participate

    cyclic behaviour DetectLeaving
        on native CloseCommand do
            deactivate participate
            
    function bidDelay as duration do
        nseconds = delayMin + randomInteger(delayMax-delayMin)
        return ("PT"+nseconds+"S") as duration


cyclic behaviour ParticipateToAuction for agent Bidder
    on activate do
        log "Requesting to participate."
        send message inform Participating to auctioneer
        
    on deactivate do
        log "Requesting to leave"
        state of view = RemovedAuctionState(
            item of state of view,
            currentBid of state of view,
            false, 
            auctioneer
        )
        send message inform Leaving to auctioneer
        do delete
    
    on native SetStrategy(ManualBid(bid)) do
        log "Submitting bid: "+bid
        activate SendPropose(item of state of view, bid)
        strategy of agent = IdleBidder
    
    on native SetStrategy(strat) do
        strategy of agent = strat
        if strat matches AutoBudget(budget) 
            and state of view matches RunningAuctionState(itm, cb, bmi, d, cw) do
            do attemptAuto with cb + bmi, d, budget, cw, itm
    
    on message cfp (SubmitBid(item, currentBid, bidMinimumIncrement, 
            deadline, currentWinner), _) do
        requiredBid = currentBid + bidMinimumIncrement
        state of view = RunningAuctionState(item, currentBid, 
            bidMinimumIncrement, deadline, currentWinner)
        if strategy matches AutoBudget(budget) do
            do attemptAuto with requiredBid, deadline, budget, currentWinner, item

    procedure attemptAuto with bid as integer, deadline as timestamp, budget as integer,
            currentWinner as text, item as Item do
        # If we are not the best bidder, it's not too late, and we have enough money...
        if currentWinner ≠ name of agent and now < deadline and bid ≤ budget do
            # Propose to buy the item at the specified price.
            log "Submitting bid: "+bid
            activate SendPropose(item, bid) after bidDelay
        else if bid > budget do
            log "Not enough money..."

    on message inform AwaitingStart(item, startingBid, 
        bidMinimumIncrement, currentlyRegistered, required) do
        state of view of agent = AwaitingAuctionState(
            item, startingBid, bidMinimumIncrement,
            currentlyRegistered, required)

    on message accept_proposal do
        log "My bid has been accepted."
        do notifyResponse with view, "Bid accepted."
        
    on message reject_proposal (_, _, BidRejected(BidTooLow(b))) do
        log "My bid was rejected, bid too low: " + b
        do notifyResponse with view, "Bid too low: "+b
        
    on message inform ItemSold(item, aid of agent, bid) do
        log "I bought "+item+" for "+bid+"!"
        state of view = EndedAuctionState(item, bid, true, aid of agent)
        
    on message inform ItemSold(item, otherBidder, bid) do
        log otherBidder+" bought "+item+" for "+bid+"."
        state of view = EndedAuctionState(item, bid, true, otherBidder)
            
    on message inform ItemNotSold(item, lastBidder, bid) do
        log "Not sold: "+item+"." 
        state of view = EndedAuctionState(item, bid, false, lastBidder)
    
one shot behaviour SendPropose for agent Bidder
    property item as Item
    property proposingPrice as integer
    
    on create with item as Item, proposingPrice as integer do
        item of this = item
        proposingPrice of this = proposingPrice

    on execute do
        send message propose (Buy(item), Priced(item, proposingPrice)) to auctioneer
