module examples.auction.gui

native procedure addAuctionView with 
    view as BuyerView,
    auctioneer as aid,
    auctionState as AuctionState
    uses ontology BuyerGUI 
    


ontology BuyerGUI extends EnglishAuction
    native concept BuyerView
    native concept BidderView(state as AuctionState)
    proposition CloseCommand
    proposition RefreshCommand
    concept BidderStrategy
    concept IdleBidder extends BidderStrategy
    concept AutoBudget(budget as integer) extends BidderStrategy
    concept ManualBid(bid as integer) extends BidderStrategy
    predicate SetStrategy(strat as BidderStrategy)
    


agent BuyerAgent uses ontologies FacilitatorOntology, BuyerGUI
    property view as BuyerView
    
    on create with v as BuyerView do
        view of this = v
        activate GetAuctions
        activate BuyerGUIEvents
        
    on destroy do
        send message request Deregister to "Facilitator"@
        
   
cyclic behaviour BuyerGUIEvents for agent BuyerAgent
    on native CloseCommand do
        do delete
        
    on native RefreshCommand do
        send message request ProvideAuctions to "Facilitator"@


cyclic behaviour GetAuctions for agent BuyerAgent
    on activate do
        log "Registering..."
        send message request Register(BuyerRole) to "Facilitator"@

    on message inform OpenAuctions(aucts) do
        log "Auctioneers found: "+aucts
        send message request ProvideAuctionState to aucts
        
    on message inform NewAuctioneer(auctioneer) do
        log "Auctioneer found: "+auctioneer
        send message request ProvideAuctionState to auctioneer
        
    on message cfp (SubmitBid(st), _) do
        log "Auction of "+localName of sender+" in state: "+ st
        do addAuctionView with view, sender, st
        
    on message inform StateIs(st) do
        log "Auction of "+localName of sender+" in state: "+ st
        do addAuctionView with view, sender, st
        
    



