module examples.auction.gui

native procedure updateBuyerView with 
    view as BuyerView,
    auctions as map of aid:AuctionState
    uses ontology BuyerGUI 
    


ontology BuyerGUI extends EnglishAuction
    native concept BuyerView
    native concept BidderView(state as AuctionState)
    proposition ClosingWindow
    proposition Refresh
    concept BidderStrategy
    concept IdleBidder extends BidderStrategy
    concept AutoBudget(budget as integer) extends BidderStrategy
    concept ManualBid(bid as integer) extends BidderStrategy
    predicate SetStrategy(strat as BidderStrategy)
    


agent BuyerAgent uses ontologies FacilitatorOntology, BuyerGUI
    property auctions as map of aid:AuctionState
    property view as BuyerView
    
    on create with v as BuyerView do
        view of this = v
        activate RegisterAsBuyer
        activate BuyerGUIEvents
        
    cyclic behaviour RegisterAsBuyer
        on activate do
            send message request Register(BuyerRole) to "Facilitator"@
            
        on message inform Registered do
            log "Registered!"
            activate GetAuctions
            deactivate this

cyclic behaviour BuyerGUIEvents for agent BuyerAgent
    on native ClosingWindow do
        send message request Deregister to "Facilitator"@
        
    on native Refresh do
        send message request ProvideAuctions to "Facilitator"@


cyclic behaviour GetAuctions for agent BuyerAgent
    on activate do
        send message request ProvideAuctions to "Facilitator"@

    on message inform OpenAuctions(aucts) do
        log "Auctioneers found: "+aucts
        send message request ProvideAuctionState to aucts
        
    on message inform NewAuctioneer(auctioneer) do
        log "Auctioneer found: "+auctioneer
        send message request ProvideAuctionState to auctioneer
        
    on message cfp (SubmitBid(st), _) do
        log "Auction of "+localName of sender+" in state: "+ st
        auctions[sender] = st
        do updateBuyerView with view, auctions
        
    on message inform StateIs(st) do
        log "Auction of "+localName of sender+" in state: "+ st
        auctions[sender] = st
        do updateBuyerView with view, auctions

    
            

