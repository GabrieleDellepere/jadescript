module examples.musicstreaming


agent StreamCnetInitiator uses ontology MusicStreaming

    property providers as list of aid
    property track as Track
    property maxPrice as MaximumPrice
    property minBitrate as MinimumBitrate
    property maxBitrate as MaximumBitrate
    property currentToken = 0
    
    procedure generateNewRequestToken do
        currentToken = currentToken + 1
    
    on create with
        providers as list of text,
        trackTitle as text, 
        maxPrice as integer,
        minBitrate as integer,
        maxBitrate as integer do
        
        for c in providers do
            add c as aid to providers of this
        track = Track(trackTitle)
        maxPrice of this = MaximumPrice(maxPrice)
        minBitrate of this = MinimumBitrate(minBitrate)
        maxBitrate of this = MaximumBitrate(maxBitrate)
        activate InitiateCnet
        
        
    on behaviour failure r as Proposition
        when behaviour is InitiateCnet do
        log "Failed to start protocol, reason: " + r
        log "Shutting down agent"
        do nothing #TODO shutdown
        
    on behaviour failure r as Proposition 
        when behaviour is CollectProposals do
        log "Failed to collect proposals, reason: " + r
        log "Canceling protocol"
        #activate CancelCFP
        
    on behaviour failure NoProposals 
        when behaviour is EvaluateProposals do
        log "No proposals received. Restarting protocol in 10s..."
        do generateNewRequestToken
        activate InitiateCnet after "PT10S" as duration
        
    on behaviour failure r as Proposition
        when behaviour is AwaitResult do
        log "Failure while awaiting for the result, reason:" + r
        send message cancel Stream(track, currentToken) to provider of behaviour
        do nothing #TODO shutdown
        
        
    
    
        


    # Inserts prop into toList, ensuring that toList 
    #  is sorted from best proposal to worst.
    procedure addProposalSorted with
        prop as (Stream, ProviderConditions, aid),
        toList as list of (Stream, ProviderConditions, aid) do
        if length of toList = 0 do
            add prop to toList
        else do
            added = false
            for i in 0 to length of toList - 2 do
                if compareProposals(prop[1], toList[i][1]) do
                    add prop to toList at i
                    added = true
                    break
            if not added do # It's the worst proposal.
                add prop to toList # Add it at the end.


    # Returns true if p1 is better or equal than p2.
    function compareProposals(
        p1 as ProviderConditions,
        p2 as ProviderConditions
    ) as boolean do
        price1 = price of price of p1
        bitrate1 = bitrate of bitrate of p1
        price2 = price of price of p2
        bitrate2 = bitrate of bitrate of p2
        if price1 = price2 do
            if bitrate1 ≥ bitrate2 do
                return true
            else do
                return false
        else if price1 < price2 do
            return true 
        else do
            return false

    

    procedure validateProposal 
        with proposal as ProposeMessage of (Stream, ProviderConditions) do
        #TODO replace with deconstructions
        #(stream, ProviderConditions(price, bitrate)) = content of proposal
        #when content of proposal matches (stream, ProviderConditions(price, bitrate) do 
        when content of proposal matches (stream, conditions) do
          when conditions matches ProviderConditions(
              PriceIs(price), BitrateIs(bitrate)
          ) do
            if requestId of stream ≠ currentToken of this do
                throw TokenMismatchException(
                    proposal,
                    currentToken of this
                )
            if track of stream ≠ track of this do
                throw InvalidTrackException(
                    proposal,
                    track of this
                )
            if price > price of maxPrice do
                throw InvalidConditionException(
                    proposal,
                    maxPrice,
                    PriceIs(price)
                )
            if bitrate < bitrate of minBitrate do
                throw InvalidConditionException(
                    proposal,
                    minBitrate,
                    BitrateIs(bitrate)
                )
            if bitrate > bitrate of maxBitrate do
                throw InvalidConditionException(
                    proposal,
                    maxBitrate,
                    BitrateIs(bitrate)
                )
        

one shot behaviour InitiateCnet for agent StreamCnetInitiator
    on execute do
        log "Sending proposals to candidates."
        collect = CollectProposals
        activate collect
        timeout = now + "PT1S" as duration
        activate EvaluateProposals(collect) at timeout
        
        send message cfp (
            Stream(track, currentToken of agent), 
            InitiatorPreconditions(
                maxPrice, minBitrate, maxBitrate, timeout
            )
        ) to providers
        
        
cyclic behaviour CollectProposals for agent StreamCnetInitiator
    property proposals as list of (Stream, ProviderConditions, aid)
    
    on message refuse (_ as Action, reason as Proposition) do
        log "Participant with name '" +
            name of sender of message + 
            "' refused to make a proposal, reason: " + reason + "."
    
    on message propose (stream as Stream, providerConditions as ProviderConditions) do
        do validateProposal with proposal=message
        log "Proposal to "+stream+" received from '" +
            name of sender of message + "' with conditions: "+providerConditions
        p = (stream, providerConditions, sender of message)
        do addProposalSorted with prop=p, toList=proposals
    
    on exception InvalidConditionException(proposal, precondition, condition)
        when content of proposal matches (stream, conditions) do
        send message reject_proposal (
            stream, conditions,
            UnmetPrecondition(precondition, condition)
        ) to sender of proposal
            
    on exception InvalidTrackException(proposal, requestedTrack) 
        when content of proposal matches (stream, conditions) do
        send message reject_proposal(
            stream, 
            conditions,
            WrongTrack(requestedTrack, track of stream)
        ) to sender of proposal
        
    on exception TokenMismatchException(proposal, token) 
        when content of proposal matches (stream, conditions) do
        send message reject_proposal (
            stream,
            conditions,
            LateProposal(currentToken of agent)
        ) to sender of proposal


one shot behaviour EvaluateProposals for agent StreamCnetInitiator
    property collect as CollectProposals
    on create with b as CollectProposals do
        collect = b
        
    on activate do
        deactivate collect
        if length of proposals of collect = 0 do
            fail this with NoProposals
        else do
            when proposals of collect matches 
                [(bestTask, bestConditions, bestProvider) | rest] do
                awaitResult = AwaitResult(fromProvider=bestProvider)
                activate awaitResult
                activate ResultTimeout(awaitResult) after "PT10S" as duration
                send message accept_proposal (bestTask, bestConditions) 
                    to bestProvider
                for otherProposal in rest do
                    when otherProposal matches (otherTask, otherConditions, otherProvider) do
                        send message reject_proposal(
                            otherTask,
                            otherConditions,
                            BetterConditionsFound(
                                conditions=bestConditions,
                                by=bestProvider
                            )
                        ) to otherProvider


cyclic behaviour AwaitResult for agent StreamCnetInitiator
    property provider as aid
    
    on create with fromProvider as aid do
        provider of this = fromProvider
        
    on message inform ReadyToStream(readyTrack, url) do
        log "Steaming "+readyTrack+" from "+url
            
            
one shot behaviour ResultTimeout for agent StreamCnetInitiator
    property awaitResult as AwaitResult
    
    on create with ar as AwaitResult do
        awaitResult = ar
        
    on execute do
        if state of awaitResult = "ACTIVE" do
            fail awaitResult with StreamingTimeout
            
cyclic behaviour HandleLateProposals
    for agent StreamCnetInitiator
    
    on stale message propose (stream as Stream, conditions as Proposition) 
        when stream matches Stream(_, token) do
        if token = currentToken do
            # It's a proposal for the current iteration of the protocol
            putback message
        else do
            send message reject_proposal (stream, conditions, LateProposal(currentToken)) to sender of message
    
    
    

