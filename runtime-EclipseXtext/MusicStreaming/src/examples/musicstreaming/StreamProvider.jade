module examples.musicstreaming

agent StreamProvider uses ontology MusicStreaming
    on create do
        do initializeTrackDatabase
    
    
    # Overriden by sub-agents.
    procedure initializeTrackDatabase do 
        do nothing
    
    
    # Overriden by sub-agents
    function hasTrack(t as Track) as boolean do
        return false
    
    
    # Overriden by sub-agents
    function computeProposal(forTrack as Track) as (integer, integer) do
        return (0, 0)
    
    
    # Overriden by sub-agents
    function canMeetRequirements(
        forTrack as Track, requirements as Proposition
    ) as boolean do
        return false
        
    # Overriden by sub-agents
    function getUrl(forTrack as Track) as text do
        return ""
    
    on behaviour failure CannotPerformTask(t, r) 
        when behaviour matches awaitResponse as AwaitResponse do
        activate SendFailureToInitiator( 
            t, r, initiator of awaitResponse
        )
    
    one shot behaviour SendFailureToInitiator
        property task as Action
        property reason as Proposition
        property initiator as aid
        on create with
            task as Action, 
            reason as Proposition, 
            initiator as aid do
            task of this = task
            reason of this = reason
            initiator of this = initiator
            
        on activate do
            send message failure (task, reason) to initiator
            
            
    
    cyclic behaviour RespondToCFP
        on message cfp (Stream(track), requirements as InitiatorPreconditions) do
            if not hasTrack(track) do
                send message refuse (Stream(track), TrackUnavailable(track)) 
                    to sender of message
            else if not canMeetRequirements(track, requirements) do
                send message refuse (
                    Stream(track), UnableToMeetRequirements(requirements)
                ) to sender of message
            else do
                streamProposal = computeProposal(forTrack=track)
                price = streamProposal[0]
                bitrate = streamProposal[1]
                stream = Stream(track)
                conditions = ProviderConditions(PriceIs(price), BitrateIs(bitrate))
                activate AwaitResponse(stream, conditions, sender of message)
                send message propose (stream, conditions) to sender of message 
    
    
    cyclic behaviour AwaitResponse
        property proposedStream as Stream
        property proposedConditions as ProviderConditions
        property initiator as aid
        
        on create with s as Stream, c as ProviderConditions, initiator as aid do
            proposedStream = s
            proposedConditions = c
            initiator of this = initiator
        
        on message accept_proposal (proposedStream, proposedConditions) do
            send message inform ReadyToStream(
                track of proposedStream,
                getUrl(forTrack=track of proposedStream)
            ) to initiator
            
        
        on message accept_proposal (proposedStream, otherConditions as Proposition) do
            fail this with CannotPerformTask(
                task=proposedStream,
                reason=NotAgreedConditions(
                    agreedOn=proposedConditions,
                    notAgreedOn=otherConditions
                )
            )
            
            
        on message accept_proposal (Stream(track), _ as Proposition) 
            when track â‰  track of proposedStream do
            fail this with CannotPerformTask(
                task=Stream(track),
                reason=WrongTrack(
                    requestedTrack=track,
                    providedTrack=track of proposedStream
                )
            )
        
        
        on message accept_proposal (otherAction as Action, otherConditions as Proposition) do
            send message not_understood message to sender of message
        
        
        on message reject_proposal (
            task as Action, 
            conditions as Proposition, 
            reason as Proposition
        ) do
            log "Initiator rejected proposal to perform "+task+
                " with conditions "+conditions+". "
            log " Reason: "+reason


