module examples.auction

# Auctioneer agent.
agent Auctioneer uses ontology EnglishAuction

    # --Auctioneer parameters. Change these accordingly--
    # No auction can be done with less participants:
    property minimumParticipants = 2  
    # The auctioneer awaits this interval for new bids:
    property waitingForBidsTime = "PT30S" as duration 
    # Initial price:
    property startPrice = 80
    # If the auction never reaches this price, the item is not sold:
    property reservePrice = 120
    # Each bid has to outbid the current price by this amount:
    property bidMinimumIncrement = 2
    # The item to be sold:
    property item = Painting("Leonardo", "Mona Lisa")
    
    # --Auctioneer state variables--
    property currentPrice = startPrice
    property candidateBuyer as aid
    property thereIsCandidate = false
    property participants as set of aid 
    
    # --Auction behaviour--
    property doAuction as DoAuction = DoAuction
    property endAuction as EndAuction = EndAuction
    
    on create do
        log "Agent " + name of agent + " created."
        activate AwaitParticipants


cyclic behaviour AwaitParticipants for agent Auctioneer
    procedure logStatus do
        log "Awaiting participants (" + size of participants + "/" + minimumParticipants + ")..."

    on activate do
        do logStatus

    on message inform ImAlive do
        add sender of message to participants
        do logStatus
        if size of participants ≥ minimumParticipants do
            log "Starting auction."
            log "Selling: " + item
            activate doAuction
            deactivate this
            

    on message inform ImDying do
        remove sender of message from participants
        do logStatus


cyclic behaviour DoAuction for agent Auctioneer 

    property nextTimeout as timestamp

    on activate do
        log "Selling " + item + ", starting from price " + currentPrice + 
            "(minimum bid increment: " + bidMinimumIncrement + ", reserve price: " + reservePrice + ")"
        do callForBids


    function getCurrentWinnerName() as text do
        currentlyWinning = ""
        if thereIsCandidate do
            currentlyWinning = name of candidateBuyer
        return currentlyWinning

    procedure callForBids do
        nextTimeout = now + waitingForBidsTime
        log "Calling for proposals, new price: " + currentPrice +", next timeout: " + nextTimeout
        send message cfp SubmitBid(
            item,
            currentPrice,
            bidMinimumIncrement,
            nextTimeout,
            getCurrentWinnerName()
        ) to participants
        activate endAuction at nextTimeout
        
    on message inform ImAlive do
        add sender of message to participants
        send message cfp SubmitBid(item, currentPrice, bidMinimumIncrement, nextTimeout, getCurrentWinnerName()) to sender of message
    
    
    on message inform ImDying do
        remove sender of message from participants
        if size of participants < minimumParticipants do
            activate endAuction

    on message propose (
        Buy(proposedItem), 
        Priced(proposedItem, proposedPrice)
    ) do
        log "Received bid of "+proposedPrice
        minExpectedPrice = currentPrice+bidMinimumIncrement
        # This branch (and its ItemNotForSale) could be removed to simplify
        if proposedItem ≠ item do
            log "Rejecting proposal, item not for sale: "+proposedItem
            send message reject_proposal (
            	Buy(proposedItem), 
            	Priced(proposedItem, proposedPrice), 
            	BidRejected(ItemNotForSale)
            ) to sender of message
        else if proposedPrice < minExpectedPrice do
            log "Rejecting proposal, bid too low ("+proposedPrice+" < "+minExpectedPrice+")"
            send message reject_proposal (
            	Buy(proposedItem),
            	Priced(proposedItem, proposedPrice),
            	BidRejected(BidTooLow(minExpectedPrice))
            ) to sender of message
        else do
            log "Accepting proposal!"
            send message accept_proposal (
            	Buy(proposedItem),
            	Priced(proposedItem, proposedPrice)
            ) to sender of message
            currentPrice = proposedPrice
            thereIsCandidate = true
            candidateBuyer = sender of message
            do callForBids
            
    
    
    
    
    
one shot behaviour EndAuction for agent Auctioneer
    
    on execute do
        deactivate doAuction
        if not thereIsCandidate or currentPrice < reservePrice do
            log "No valid bid submitted. Not selling item."
            send message inform ItemNotSold(item) to participants
        else do
            log "Selling item "+item+" to "+candidateBuyer
            send message inform ItemSold(item, candidateBuyer, currentPrice) to participants
    