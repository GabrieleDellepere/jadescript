module examples.auction

agent Bidder uses ontology EnglishAuction
    property budget as integer
    on create with budget as integer do
        budget of this = budget
        log "Bidder "+name of agent+" created with budget: "+budget
        activate ParticipateToAuction
        
cyclic behaviour ParticipateToAuction for agent Bidder
    on activate do
        send message inform Participating to aid("Auctioneer")
        
    on deactivate do
        send message inform Leaving to aid("Auctioneer")
    
    on message cfp (SubmitBid(item, currentBid, bidMinimumIncrement, deadline, currentWinner), _) do
        bid = currentBid + bidMinimumIncrement
        # If we are not the best bidder, it's not too late, and we have enough money...
        if currentWinner ≠ name of agent and now < deadline and bid ≤ budget do
            # Propose to buy the item at the specified price.
            log "Submitting bid: "+bid
            activate SendPropose(item, bid) #after "PT3S" as duration
        else if bid > budget do
            log "Not enough money..."
            
    on message accept_proposal do
        log "I am the best bidder!"
        
    on message reject_proposal (_, _, reason) do
        log "I am NOT the best bidder, reason: " + reason
        
            
    on message inform ItemSold(item, buyer, finalPrice) do
        if buyer=aid of agent do
            log "I bought "+item+" for "+finalPrice+"!"
        else do
            log buyer+" bought "+item+" for "+finalPrice+"."
    
    on message inform ItemNotSold(item) do
        log "Not sold: "+item+"." 
    
    
one shot behaviour SendPropose for agent Bidder
    property item as Item
    property proposingPrice as integer
    
    on create with item as Item, proposingPrice as integer do
        item of this = item
        proposingPrice of this = proposingPrice

    on execute do
        send message propose (Buy(item), Priced(item, proposingPrice)) to aid("Auctioneer")