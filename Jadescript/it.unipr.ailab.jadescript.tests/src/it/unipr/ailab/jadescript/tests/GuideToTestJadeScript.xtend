/*
 * generated by Xtext 2.12.0
 * 
 * Examples below explains how to use JUnit for testing Jadescript code
 */
package it.unipr.ailab.jadescript.tests

import com.google.inject.Inject
import it.unipr.ailab.jadescript.jadescript.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.xbase.lib.util.ReflectExtensions
import org.eclipse.xtext.xbase.testing.CompilationTestHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper

@RunWith(XtextRunner)
@InjectWith(JadescriptInjectorProvider)
class GuideToTestJadeScript {
	@Inject
	ParseHelper<Model> parseHelper
	@Inject extension ValidationTestHelper
	@Inject extension ReflectExtensions
	@Inject extension CompilationTestHelper
	@Inject extension ParseHelper<Model>

	boolean parsingError

	// 1) Test only correctly code with parser
	// N.B. We aren't using the validator, so duplicated property are not flagged
	@Test
	def void testOnlyParser() {
		val result = parseHelper.parse('''		
			module example
			agent Agente
				property person as text
				property person as text
		''')
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	// 2) Test correctly code with parser and validator
	@Test
	def void testParserAndValidator() {
		'''		
			module example
			agent Agente
				property person as text
		'''.parse.assertNoErrors
	}

	// 2.5) Test correctly code with parser and validator (including warnings). Optional but suggested.
	@Test
	def void testParserAndValidatorNoIssues() {
		'''		
			module example
			agent Agente
				property person as text
		'''.parse.assertNoIssues
	}

	// 3) Test you correctly generated Java code
	@Test
	def void testGeneratedJavaCode() {
		'''		
			module example
			agent Agente
				property person as text
		'''.compile [
			getCompiledClass
		]
	}

	/*  How to verify a code with an error catched by parser/validator
	 * 
	 * N.B. First, check you wrote correct the code with parsing test:see test 1)
	 */
	@Test
	def void testErrorCatchedByParserValidator() {
		'''		
			module example
			agent Agente
				property person as text
				property person as text
		'''.compile [
			Assert.assertFalse(errorsAndWarnings.isNullOrEmpty)
		]
	}

	// Another way to test the code
	// It catch parsing and/or validating errors
	@Test
	def void testAlternativeWayToCatchParsingError() {

		parsingError = false;
		try {
			'''hello world'''.parse.assertNoErrors
		} catch (AssertionError ae) {
			parsingError = true;
		} finally {
			Assert.assertTrue(parsingError)
		}
	}

	// Test returned object is not null
	@Test
	def void testGeneratedJavaCodeReturnedObject() {
		'''module example
  				ontology Peopleeeeeeee
  					concept person(name as text)'''.compile [

			getCompiledClass("example.person").newInstance => [
				Assert.assertNotNull(it.invoke("getName"))
			]
		]
	}

	// Test bad package name
	@Test
	def void testGeneratedJavaCodeBadPackageName() {
		'''module example
  				ontology Peopleeeeeeee
  					concept person(name as text)'''.compile [

			Assert.assertNull(getCompiledClass("exampleeeeeeeeee.person"))
			Assert.assertNotNull(getCompiledClass("example.person"))

		]

	}

	// Test attribute type
	@Test
	def void testGeneratedJavaCodeAttributeType() {
		'''
		
		module example
		agent Agente
			property person as text'''.compile [
			Assert.assertTrue(errorsAndWarnings.isNullOrEmpty)

			getCompiledClass("example.Agente").newInstance => [
				Assert.assertNotNull(it.invoke("getPerson"))
				Assert.assertTrue(it.invoke("getPerson").equals(""))
			]

		]
	}

	// Bad test (don't do it)
	// It doesn't catch  parsing error
	@Test
	def void badTestGeneratedJavaCode() {
		'''hello world'''.compile [
			getCompiledClass
		// Assert.assertFalse(errorsAndWarnings.nullOrEmpty); IS MISSING
		]

	}

	// Bad test (don't do it) 
	@Test
	def void badTesParsing() {
		parseHelper.parse('''
			module example
								ontology Peopleeeeeeee
			concept person(name as text)
			concept	person(name as text)
		''').eResource.errors.isEmpty
	}

}
