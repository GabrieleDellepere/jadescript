/*
 * generated by Xtext 2.25.0
 */
package it.unipr.ailab.jadescript.validation;

import com.google.common.collect.HashMultimap;
import com.google.inject.Inject;
import it.unipr.ailab.jadescript.jadescript.*;
import it.unipr.ailab.jadescript.jvmmodel.JadescriptCompilerUtils;
import it.unipr.ailab.jadescript.semantics.SemanticsModule;
import it.unipr.ailab.jadescript.semantics.context.ContextManager;
import it.unipr.ailab.jadescript.semantics.helpers.ValidationHelper;
import it.unipr.ailab.jadescript.semantics.topelement.AgentDeclarationSemantics;
import it.unipr.ailab.jadescript.semantics.topelement.GlobalOperationSemantics;
import it.unipr.ailab.jadescript.semantics.topelement.OntologySemantics;
import it.unipr.ailab.jadescript.semantics.topelement.TopElementBehaviourSemantics;
import it.unipr.ailab.maybe.Maybe;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.jvmmodel.JvmAnnotationReferenceBuilder;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypeReferenceBuilder;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;

import java.util.*;

/**
 * This class contains custom validation rules.
 * <p>
 * See
 * <a href="https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation">...</a>
 */

public class JadescriptValidator extends AbstractJadescriptValidator {
    @Inject
    private JvmTypeReferenceBuilder.Factory typeRefBuilderFactory;

    @Inject
    private JvmTypesBuilder _jvmTypesBuilder;

    @Inject
    private JadescriptCompilerUtils _jadescriptCompilerUtils;

    @Inject
    private IQualifiedNameProvider _iQualifiedNameProvider;

    @Inject
    private JvmAnnotationReferenceBuilder _jvmAnnotationReferenceBuilder;


    public SemanticsModule createSemanticsModule(final Model model, String process) {
        final JvmTypeReferenceBuilder _typeReferenceBuilder =
                this.typeRefBuilderFactory.create(model.eResource().getResourceSet());
        SemanticsModule module = new SemanticsModule(process, this._jvmTypesBuilder, _typeReferenceBuilder,
                this._jvmAnnotationReferenceBuilder,
                this._iQualifiedNameProvider, this._jadescriptCompilerUtils
        );
        String moduleName;
        boolean _isWithModule = model.isWithModule();
        if (_isWithModule) {
            moduleName = model.getName();
        } else {
            moduleName = "";
        }
        module.get(ContextManager.class).enterModule(moduleName, Maybe.some(model));
        module.get(ContextManager.class).enterFile(
                model.eResource().getURI().toString(),
                model.eResource().getURI().trimFileExtension().lastSegment(),
                Maybe.toListOfMaybes(Maybe.some(model.getImportSection())
                        .__(ImportSection::getImportSection)
                        .__(XImportSection::getImportDeclarations))
        );
        return module;
    }

    protected static final String ISSUE_CODE_PREFIX = "it.unipr.ailab.jadescript.";

    @Override
    public void checkInnerExpressions(final XExpression expr) {
    }

    public static final String DUPLICATE_ELEMENT = (JadescriptValidator.ISSUE_CODE_PREFIX + "DuplicateElement");

    private String extractName(final TopElement te) {
        this._jadescriptCompilerUtils.setAnnotationReferenceBuilder(this._jvmAnnotationReferenceBuilder);
        if (te instanceof Agent) {
            return ((Agent) te).getName();
        }
        if (te instanceof Behaviour) {
            return ((Behaviour) te).getName();
        }
        if (te instanceof Ontology) {
            return ((Ontology) te).getName();
        }
        if (te instanceof GlobalFunctionOrProcedure) {
            return ((GlobalFunctionOrProcedure) te).getName();
        }
        return null;
    }

    @Check
    public void checkUniqueTopElements(final Model model) {
        this._jadescriptCompilerUtils.setAnnotationReferenceBuilder(this._jvmAnnotationReferenceBuilder);
        final HashMultimap<String, TopElement> multiMap = HashMultimap.create();
        EList<TopElement> _elements = model.getElements();
        for (final TopElement e : _elements) {
            if ((e instanceof GlobalFunctionOrProcedure)) {
                int parCount = ((GlobalFunctionOrProcedure) e).getParameters().size();
                String funcName = ((GlobalFunctionOrProcedure) e).getName();
                multiMap.put(((funcName + "#") + parCount), e);
            } else {
                multiMap.put(this.extractName(e), e);
            }
        }
        Set<Map.Entry<String, Collection<TopElement>>> _entrySet = multiMap.asMap().entrySet();
        for (final Map.Entry<String, Collection<TopElement>> entry : _entrySet) {
            {
                final Collection<TopElement> duplicates = entry.getValue();
                int _size = duplicates.size();
                boolean _greaterThan = (_size > 1);
                if (_greaterThan) {
                    for (final TopElement d : duplicates) {
                        this.error(
                                "Duplicate element '" + entry.getKey() + "' in model '" + model.getName() + "'",
                                d,
                                JadescriptPackage.eINSTANCE.getNamedElement_Name(),
                                JadescriptValidator.DUPLICATE_ELEMENT
                        );
                    }
                }
            }
        }
    }

    protected void addImportUnusedIssues(final Map<String, List<XImportDeclaration>> imports) {
        // Overriden to do nothing.
    }

    @Override
    protected void checkIsFromCurrentlyCheckedResource(EObject object) {
//        overriden to make sure that objects with null resources are accepted
        if (object.eResource() != null) {
            super.checkIsFromCurrentlyCheckedResource(object);
        }
    }


    @Check
    public void validateModel(final Model m) {
        try {
            this._jadescriptCompilerUtils.setAnnotationReferenceBuilder(this._jvmAnnotationReferenceBuilder);
            boolean _isReservedName = ValidationHelper.isReservedName(Maybe.some(m.getName()));
            if (_isReservedName) {
                this.error("invalid module name", m, null, ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
            }

            HashMultimap<String, GlobalFunctionOrProcedure> functionsMap = HashMultimap.create();
            ArrayList<TopElement> others = new ArrayList<>();
            EList<TopElement> _elements = m.getElements();
            for (final TopElement element : _elements) {
                if ((element instanceof GlobalFunctionOrProcedure)) {
                    functionsMap.put(((GlobalFunctionOrProcedure) element).getName(), ((GlobalFunctionOrProcedure) element));
                } else {
                    others.add(element);
                }
            }


            for (final String k : functionsMap.keySet()) {
                {
                    SemanticsModule module = createSemanticsModule(m, "Validation");
                    GlobalOperationSemantics gms = module.get(
                        GlobalOperationSemantics.class);
                    for (final GlobalFunctionOrProcedure v : functionsMap.get(k)) {
                        gms.addMethod(Maybe.some(v));
                    }

                    gms.validate(gms.getOriginalMethod(k), this);

                }
            }
            for (final TopElement element : others) {
                {
                    SemanticsModule module = createSemanticsModule(m, "Validation");
                    boolean matched = false;
                    if (element instanceof Agent) {
                        matched = true;
                        module.get(AgentDeclarationSemantics.class).validate(Maybe.some(((Agent) element)), this);
                    }
                    if (!matched) {
                        if (element instanceof Behaviour) {
                            matched = true;
                            module.get(TopElementBehaviourSemantics.class).validate(
                                    Maybe.some(((Behaviour) element)), this
                            );
                        }
                    }
                    if (!matched) {
                        if (element instanceof Ontology) {
                            module.get(OntologySemantics.class).validate(Maybe.some(((Ontology) element)), this);
                        }
                    }
                }
            }
        } catch (final Throwable _t) {
            if (_t instanceof RuntimeException) {
                final RuntimeException ex = (RuntimeException) _t;
                ex.printStackTrace();
            } else {
                //noinspection DataFlowIssue
                throw Exceptions.sneakyThrow(_t);
            }
        }
    }


}