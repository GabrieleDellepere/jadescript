/*
 * generated by Xtext 2.25.0
 */
package it.unipr.ailab.jadescript.ui.outline;

import java.util.function.Consumer;

import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;

import it.unipr.ailab.jadescript.jadescript.Agent;
import it.unipr.ailab.jadescript.jadescript.Behaviour;
import it.unipr.ailab.jadescript.jadescript.Feature;
import it.unipr.ailab.jadescript.jadescript.GlobalFunctionOrProcedure;
import it.unipr.ailab.jadescript.jadescript.Model;
import it.unipr.ailab.jadescript.jadescript.Ontology;
import it.unipr.ailab.jadescript.jadescript.TopElement;

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
public class JadescriptOutlineTreeProvider extends DefaultOutlineTreeProvider {
	public boolean _isLeaf(final Feature x) {
	    return true;
	  }
	  
	  public boolean _isLeaf(final GlobalFunctionOrProcedure gfp) {
	    return true;
	  }
	  
	  
	  public void _createChildren(final DocumentRootNode outlineNode, final Model model) {
	    model.getElements().forEach((Consumer<TopElement>) (TopElement el) -> {
	      this.createNode(outlineNode, el);
	    });
	  }
	  
	  public void _createChildren(final IOutlineNode node, final Agent agent) {
	    agent.getFeatures().forEach((Consumer<Feature>) (Feature f) -> {
	      this.createNode(node, f);
	    });
	  }
	  
	  public void _createChildren(final IOutlineNode node, final Ontology onto) {
	    onto.getFeatures().forEach((Consumer<Feature>) (Feature f) -> {
	      this.createNode(node, f);
	    });
	  }
	  
	  public void _createChildren(final IOutlineNode node, final Behaviour behav) {
	    behav.getFeatures().forEach((Consumer<Feature>) (Feature f) -> {
	      this.createNode(node, f);
	    });
	  }
	  
	  public void _createChildren(final IOutlineNode node, final GlobalFunctionOrProcedure gfop) {
	    gfop.getFeatures().forEach((Consumer<Feature>) (Feature f) -> {
	      this.createNode(node, f);
	    });
	  }
}
